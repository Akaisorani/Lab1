digraph G{
generatenewtext;
nowstring;
auto;
nextint;
do;
while;
temps;
edge;
java;
split;
generated;
continue;
else;
stub;
text;
tempchar;
if;
laststring;
new;
static;
method;
tempgraph;
weight;
graph;
ischar;
node;
util;
null;
true;
private;
testchar;
string;
import;
for;
getnode;
random;
tempstring;
public;
tolowercase;
class;
charat;
a;
arraystring;
ans;
length;
edges;
false;
i;
standardize;
l;
tempnode;
int;
todo;
tempans;
boolean;
s;
equals;
char;
wordgraph;
z;
to;
return;

generatenewtext->graph[label=1];
generatenewtext->static[label=1];
nowstring->continue[label=1];
nowstring->else[label=1];
nowstring->if[label=1];
nowstring->laststring[label=1];
nowstring->return[label=1];
nowstring->s[label=1];
nowstring->tolowercase[label=1];
auto->generated[label=1];
nextint->l[label=1];
do->tempchar[label=1];
while->i[label=1];
temps->split[label=1];
temps->standardize[label=1];
edge->edge[label=1];
edge->node[label=1];
edge->tempnode[label=1];
edge->to[label=1];
edge->weight[label=1];
java->util[label=1];
split->int[label=1];
split->string[label=1];
generated->method[label=1];
continue->if[label=1];
continue->node[label=1];
continue->string[label=1];
else->ans[label=1];
else->return[label=1];
else->tempstring[label=1];
stub->char[label=1];
stub->tempgraph[label=1];
text->charat[label=1];
text->length[label=1];
text->string[label=1];
text->todo[label=1];
tempchar->i[label=1];
tempchar->string[label=1];
tempchar->tempstring[label=1];
tempchar->text[label=1];
if->ans[label=1];
if->edge[label=1];
if->ischar[label=1];
if->laststring[label=1];
if->node[label=1];
if->nowstring[label=1];
if->tempstring[label=1];
if->testchar[label=1];
laststring->equals[label=1];
laststring->for[label=1];
laststring->nowstring[label=1];
laststring->tolowercase[label=1];
new->random[label=1];
static->boolean[label=1];
static->graph[label=1];
static->string[label=1];
method->stub[label=1];
tempgraph->public[label=1];
tempgraph->wordgraph[label=1];
weight->continue[label=1];
graph->tempgraph[label=1];
graph->wordgraph[label=1];
ischar->char[label=1];
ischar->tempchar[label=1];
ischar->text[label=1];
node->edges[label=1];
node->node[label=1];
node->null[label=1];
node->tempnode[label=1];
node->wordgraph[label=1];
util->random[label=1];
null->if[label=1];
null->node[label=1];
null->while[label=1];
true->else[label=1];
private->static[label=1];
testchar->a[label=1];
testchar->if[label=1];
testchar->z[label=1];
string->ans[label=1];
string->arraystring[label=1];
string->generatenewtext[label=1];
string->laststring[label=1];
string->nowstring[label=1];
string->s[label=1];
string->standardize[label=1];
string->tempans[label=1];
string->temps[label=1];
string->tempstring[label=1];
string->text[label=1];
import->java[label=1];
for->edge[label=1];
for->string[label=1];
getnode->laststring[label=1];
getnode->nowstring[label=1];
getnode->tempans[label=1];
random->nextint[label=1];
random->public[label=1];
tempstring->do[label=1];
tempstring->else[label=1];
tempstring->equals[label=1];
tempstring->for[label=1];
tempstring->i[label=1];
tempstring->null[label=1];
tempstring->split[label=1];
tempstring->tempans[label=1];
tempstring->tempchar[label=1];
tempstring->tempstring[label=1];
public->class[label=1];
public->static[label=1];
tolowercase->edge[label=1];
tolowercase->equals[label=1];
tolowercase->if[label=1];
tolowercase->node[label=1];
tolowercase->nowstring[label=1];
class->generatenewtext[label=1];
charat->i[label=1];
a->testchar[label=1];
arraystring->i[label=1];
arraystring->length[label=1];
arraystring->tempstring[label=1];
ans->ans[label=1];
ans->arraystring[label=1];
ans->equals[label=1];
ans->int[label=1];
ans->nowstring[label=1];
ans->private[label=1];
ans->static[label=1];
ans->string[label=1];
ans->tempstring[label=1];
length->int[label=1];
edges->if[label=1];
edges->string[label=1];
i->if[label=1];
i->l[label=1];
i->new[label=1];
i->return[label=1];
i->string[label=1];
i->tempstring[label=1];
i->while[label=1];
standardize->string[label=1];
standardize->text[label=1];
l->ans[label=1];
l->arraystring[label=1];
l->ischar[label=1];
l->tempchar[label=1];
l->text[label=1];
tempnode->edges[label=1];
tempnode->wordgraph[label=1];
int->i[label=1];
int->l[label=1];
todo->auto[label=1];
tempans->edge[label=1];
tempans->else[label=1];
tempans->for[label=1];
tempans->if[label=1];
tempans->tolowercase[label=1];
boolean->ischar[label=1];
s->if[label=1];
s->temps[label=1];
equals->ans[label=1];
equals->laststring[label=1];
equals->nowstring[label=1];
equals->string[label=1];
equals->tempans[label=1];
equals->tempstring[label=1];
char->tempchar[label=1];
char->testchar[label=1];
wordgraph->getnode[label=1];
wordgraph->string[label=1];
z->return[label=1];
z->testchar[label=1];
to->equals[label=1];
to->node[label=1];
return->ans[label=1];
return->false[label=1];
return->true[label=1];
}
